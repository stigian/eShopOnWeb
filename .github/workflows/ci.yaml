name: Dotnet DevSecOps

on:
  push:
  pull_request:
    types: [opened]
    branches: [main]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_and_test:
    name: Source Code Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout This Repository
        uses: actions/checkout@v4

      # TODO: This step is not required if the composite actions are in a public
      # repository. Adjust accordingly once the composite actions are public.
      - name: Checkout Actions Repository
        uses: actions/checkout@v4
        with:
          repository: stigian/archimedes-workflows-dotnet
          ref: init
          path: ./composite
          token: ${{ secrets.ACTIONS_PAT }}

      - name: Build and Test
        uses: ./composite/.github/actions/build-and-test
        with:
          # dotnet-version: '8.0' # Developer must specify versions in global.json
          global-json-path: './global.json'
          sln-path: './eShopOnWeb.sln'

  sast:
    name: SAST
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout This Repository
        uses: actions/checkout@v4

      # TODO: This step is not required if the composite actions are in a public
      # repository. Adjust accordingly once the composite actions are public.
      - name: Checkout Actions Repository
        uses: actions/checkout@v4
        with:
          repository: stigian/archimedes-workflows-dotnet
          ref: init
          path: ./composite
          token: ${{ secrets.ACTIONS_PAT }}

      - name: Static Application Security Test
        uses: ./composite/.github/actions/sast
        with:
          languages: 'csharp'
          source-path: './src'

  image_scan:
    # needs: [build_and_test, sast]
    name: Image Scan
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
      security-events: write
  #   strategy:
  #     matrix: # TODO: developer input, set according to manifest file
  #       image:
  #         - Web
  #         - PublicApi

    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4

      # TODO: This step is not required if the composite actions are in a public
      # repository. Adjust accordingly once the composite actions are public.
      - name: Checkout Actions Repository
        uses: actions/checkout@v4
        with:
          repository: stigian/archimedes-workflows-dotnet
          ref: init
          path: ./composite
          token: ${{ secrets.ACTIONS_PAT }}

  #   # # Todo: not required unless push: true in build-push-action
  #   # - name: Login to ghcr.io
  #   #   uses: docker/login-action@v3
  #   #   with:
  #   #     registry: ghcr.io
  #   #     username: ${{ github.actor }}
  #   #     password: ${{ secrets.GITHUB_TOKEN }}

  #   - name: Convert Image Name to Lowercase
  #     id: lowercase
  #     run: echo "IMAGE_NAME=$(echo "${{ github.repository }}/${{ matrix.image }}" | awk '{print tolower($0)}')" >> $GITHUB_OUTPUT

      - name: Scan Container Image
        uses: ./composite/.github/actions/image-scan
        with:
          dockerfile-path: './src/Web/Dockerfile'
          image-name: 'web'
          # image-tag: 'latest'
          # fail-on-findings: 'true'
          # severity-displayed: 'CRITICAL'
          # ignore-path: './.trivyignore'





  #   # TODO: add docker/metadata-action to apply tags based on branch, env, etc.
  #   # TODO: developer input, file parameter should be set based on manifest file
  #   - name: Build Docker Image for ${{ matrix.image }}
  #     uses: docker/build-push-action@v5
  #     with:
  #       context: .
  #       file: ./src/${{ matrix.image }}/Dockerfile
  #       push: false
  #       tags: |
  #         ghcr.io/${{ steps.lowercase.outputs.IMAGE_NAME }}:${{ github.sha}}
  #       labels: |
  #         org.opencontainers.image.source=https://github.com/${{ github.repository }}

  #   # This step sets the severity threshold and exit code for the Trivy vulnerability scanner based on the branch that triggered the workflow.
  #   # If the branch is 'main', it sets the severity threshold to 'HIGH' and the exit code to '1'. This means that the Trivy scan will fail if it finds any high or critical vulnerabilities.
  #   # For any other branch, it sets the severity threshold to 'CRITICAL' and the exit code to '0'. This means that the Trivy scan will not fail, regardless of the severity of any vulnerabilities it finds.
  #   # The severity threshold and exit code are set as outputs of this step, so they can be used in the 'Run Trivy vulnerability scanner' step.
  #   - name: Set Severity Threshold
  #     id: severity
  #     run: |
  #       if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
  #         echo "SEVERITY=HIGH" >> $GITHUB_OUTPUT
  #         echo "EXIT_CODE=1" >> $GITHUB_OUTPUT
  #         echo "CONTINUE_ON_ERROR=false" >> $GITHUB_OUTPUT
  #       else
  #         echo "SEVERITY=CRITICAL" >> $GITHUB_OUTPUT
  #         echo "EXIT_CODE=0" >> $GITHUB_OUTPUT
  #         echo "CONTINUE_ON_ERROR=true" >> $GITHUB_OUTPUT
  #       fi

  #   - name: Run Trivy vulnerability scanner
  #     uses: aquasecurity/trivy-action@062f2592684a31eb3aa050cc61e7ca1451cecd3d
  #     continue-on-error: ${{ steps.severity.outputs.CONTINUE_ON_ERROR }}
  #     with:
  #       scan-type: 'image'
  #       scanners: 'vuln,secret'
  #       image-ref: 'ghcr.io/${{ steps.lowercase.outputs.IMAGE_NAME }}:${{ github.sha }}'
  #       format: 'sarif'
  #       output: 'trivy-results.sarif'
  #       ignore-unfixed: false
  #       vuln-type: 'os,library'
  #       severity: ${{ steps.severity.outputs.SEVERITY }}
  #       exit-code: ${{ steps.severity.outputs.EXIT_CODE }}
  #       github-pat: ${{ secrets.GITHUB_TOKEN }}
  #     env:
  #       TRIVY_USERNAME: ${{ github.actor }}
  #       TRIVY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

  #   - name: Upload Trivy scan results to GitHub Security tab
  #     if: always()
  #     uses: github/codeql-action/upload-sarif@v3
  #     with:
  #       sarif_file: 'trivy-results.sarif'


  # dast:
  #   needs: [image_scan]
  #   name: DAST
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     issues: write
  #   strategy:
  #     matrix: # TODO: developer input, set according to manifest file
  #       image:
  #         - Web
  #         - PublicAPI

  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4

  #     - name: Start the Application
  #       run: |
  #         docker-compose build
  #         docker-compose up -d

  #     - name: Wait for Application to Start
  #       run: sleep 30 # TODO: developer input, startup time may vary

  #     # TODO: developer input, set target URL based on image or manifest
  #     - name: Set Target URL
  #       id: set_target
  #       run: |
  #         if [[ "${{ matrix.image }}" == "Web" ]]; then
  #           echo "TARGET=http://localhost:5106" >> $GITHUB_OUTPUT
  #         else
  #           echo "TARGET=http://localhost:5200" >> $GITHUB_OUTPUT
  #         fi

  #     # Fail the action if the branch is main, otherwise continue
  #     # - name: Set Fail Action
  #     #   id: fail_action
  #     #   run: |
  #     #     if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
  #     #       echo "FAIL_ACTION=true" >> $GITHUB_OUTPUT
  #     #     else
  #     #       echo "FAIL_ACTION=false" >> $GITHUB_OUTPUT
  #     #     fi

  #     - name: OWASP Scan ${{ matrix.image }}
  #       uses: zaproxy/action-baseline@v0.11.0
  #       with:
  #         target: ${{ steps.set_target.outputs.TARGET }}
  #         allow_issue_writing: false # Set to true to allow the action to write the results as an issue
  #         docker_name: 'ghcr.io/zaproxy/zaproxy:20231218-stable' # zaproxy:20240103-stable breaks due to https://github.com/zaproxy/action-full-scan/issues/39
  #         artifact_name: zap-scan-${{ matrix.image }}
  #         # fail_action: ${{ steps.fail_action.outputs.FAIL_ACTION }}
  #         # cmd_options: '-d' # '-d' is for debug mode
  #         # token: ${{ secrets.GITHUB_TOKEN }}
  #         # rules_file_name: '.zap/rules.tsv'

  # sign_and_sbom:
  #   needs: [dast]
  #   name: Sign and SBOM
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     packages: write
  #     id-token: write # needed for signing the images with GitHub OIDC Token
  #   strategy:
  #     matrix: # TODO: developer input, set according to manifest file
  #       image:
  #         - Web
  #         - PublicApi

  #   steps:
  #   - name: Checkout Repository
  #     uses: actions/checkout@v4
  #     with:
  #       fetch-depth: 1

  #   # TODO: research if we can change auth to use GitHub app instead of PAT
  #   - name: Login to ghcr.io
  #     uses: docker/login-action@v3
  #     with:
  #       registry: ghcr.io
  #       username: ${{ github.actor }}
  #       password: ${{ secrets.RPOC_PAT }}

  #   # Convert to lowercase for ghcr.io
  #   # This step can be eliminated if we enforce lowercase image names in the manifest
  #   - name: Format Image Names
  #     id: lowercase
  #     run: echo "IMAGE_NAME=$(echo "${{ github.repository }}/${{ matrix.image }}" | awk '{print tolower($0)}')" >> $GITHUB_OUTPUT

  #   # Todo: spend more time fine-tuning the metadata-action to fit tagging requirements
  #   # Note that the priority flag will determine the order of tags in the metadata
  #   # https://github.com/docker/metadata-action?tab=readme-ov-file#priority-attribute
  #   - name: Generate GHCR Metadata
  #     id: docker_meta
  #     uses: docker/metadata-action@v5
  #     with:
  #       images: ghcr.io/${{ steps.lowercase.outputs.IMAGE_NAME }}
  #       tags: |
  #         type=sha,format=long,prefix=,suffix=,priority=850
  #         type=raw,value=main,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
  #       labels: |
  #         org.opencontainers.image.source=https://github.com/${{ github.repository }}

  #   - name: Save Image Tag
  #     run: echo "${{ steps.docker_meta.outputs.tags }}" | head -n 1 > image-tag-${{ matrix.image }}.txt

  #   # Upload image tags to be used by other jobs in this workflow
  #   - name: Upload Image Tags
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: image-tag-${{ matrix.image }}
  #       path: image-tag-${{ matrix.image }}.txt

  #   # TODO: developer input, set according to manifest file
  #   - name: Build and Push ${{ matrix.image }} to ghcr.io
  #     id: build-and-push
  #     uses: docker/build-push-action@v5
  #     with:
  #       platforms: linux/amd64
  #       context: .
  #       file: ./src/${{ matrix.image }}/Dockerfile
  #       push: true
  #       tags: ${{ steps.docker_meta.outputs.tags }}
  #       # tags: |
  #       #   ghcr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
  #       #   ghcr.io/${{ env.IMAGE_NAME }}:latest
  #       labels: ${{ steps.docker_meta.outputs.labels }}
  #       # labels: |
  #       #   org.opencontainers.image.source=https://github.com/${{ github.repository }}

  #   - name: Install Cosign
  #     uses: sigstore/cosign-installer@v3.4.0
  #     with:
  #       cosign-release: 'v2.2.3' # optional

  #   - name: Verify Cosign Version
  #     run: cosign version

  #   # This is a short-lived key that won't be easy to verify by downstream consumers
  #   # Technically the actions runner is signing the image, not an individual or organization
  #   # Instead, we may wish to use a private key signing method, as shown in the commented
  #   # out example below.
  #   - name: Sign the Images with GitHub OIDC Token
  #     env:
  #       DIGEST: ${{ steps.build-and-push.outputs.digest }}
  #       TAGS: ${{ steps.docker_meta.outputs.tags }}
  #     run: |
  #       images=""
  #       for tag in ${TAGS}; do
  #         images+="${tag}@${DIGEST} "
  #       done
  #       cosign sign --yes ${images}

  #   # # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
  #   # - name: Sign image with a key
  #   #   run: |
  #   #     images=""
  #   #     for tag in ${TAGS}; do
  #   #       images+="${tag}@${DIGEST} "
  #   #     done
  #   #     cosign sign --yes --key env://COSIGN_PRIVATE_KEY ${images}
  #   #   env:
  #   #     TAGS: ${{ steps.docker_meta.outputs.tags }}
  #   #     COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
  #   #     COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
  #   #     DIGEST: ${{ steps.build-and-push.outputs.digest }}

  #   - name: Generate SBOM
  #     uses: anchore/sbom-action@v0
  #     with:
  #       image: ghcr.io/${{ steps.lowercase.outputs.IMAGE_NAME }}:${{ github.sha }}
  #       artifact-name: sbom-${{ matrix.image }}-${{ github.sha }}.spdx.json
  #       upload-artifact: true

  # deploy_prod:
  #   if: github.ref == 'refs/heads/main'
  #   needs: [sign_and_sbom]
  #   environment: production
  #   name: Deploy to Production Registry
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     packages: read  # needed to pull image from GHCR
  #     id-token: write # needed to access the GitHub OIDC token
  #   strategy:
  #     matrix: # TODO: developer input, set according to manifest file
  #       image:
  #         - Web
  #         - PublicApi
  #   env: # TODO: set as Actions secrets/variables
  #     AWS_REGION: us-gov-west-1
  #     AWS_ROLE: arn:aws-us-gov:iam::348600370629:role/github-actions-ecr-role

  #   steps:
  #   - name: Checkout Repository
  #     uses: actions/checkout@v4

  #   - name: Get Image Tag Artifact
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: image-tag-${{ matrix.image }}
  #       path: . # Extract artifact to current directory

  #   - name: Read Image Tag
  #     id: read_tag
  #     run: echo "GHCR_TAG=$(cat image-tag-${{ matrix.image }}.txt)" >> $GITHUB_OUTPUT

  #   - name: Format Image Names
  #     id: lowercase
  #     run: echo "ECR_TAG=$(echo "${{ github.repository }}/${{ matrix.image }}" | awk '{print tolower($0)}')" >> $GITHUB_OUTPUT

  #   - name: Configure AWS Credentials for GovCloud
  #     uses: aws-actions/configure-aws-credentials@v4
  #     with:
  #       audience: sts.amazonaws.com
  #       aws-region: ${{ env.AWS_REGION }}
  #       role-to-assume: ${{ env.AWS_ROLE }}
  #       # role-session-name: GitHubActions-${{ github.actor }}

  #   - name: Login to ghcr.io
  #     uses: docker/login-action@v3
  #     with:
  #       registry: ghcr.io
  #       username: ${{ github.actor }}
  #       password: ${{ secrets.GITHUB_TOKEN }}

  #   - name: Login to Amazon ECR
  #     id: login-ecr
  #     uses: aws-actions/amazon-ecr-login@v2
  #     with:
  #       registry-type: private

  #   # This step feels like it could be revised for clarity, but I need to test some variations separately
  #   # ECR naming convention is different from GHCR, each ECR repo corresponds to a single image
  #   # https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-create.html
  #   #   ECR_REPO_NAME: ${{ github.repository }}
  #   #   ECR_IMAGE_NAME: ${{ matrix.image }}
  #   - name: Push to Amazon ECR
  #     env:
  #       ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #     run: |
  #       docker pull ${{ steps.read_tag.outputs.GHCR_TAG }}
  #       docker tag ${{ steps.read_tag.outputs.GHCR_TAG }} $ECR_REGISTRY/${{ steps.lowercase.outputs.ECR_TAG }}:${{ github.sha }}
  #       docker push $ECR_REGISTRY/${{ steps.lowercase.outputs.ECR_TAG }}:${{ github.sha }}
