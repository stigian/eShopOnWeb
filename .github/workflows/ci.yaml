name: Dotnet Core

on:
  push:
  pull_request:
    types: [opened]
    branches: [main]
  workflow_dispatch:

jobs:
  build_code:
    name: Source Code Build and Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        global-json-file: ./global.json

    - name: Read Solution Path # TODO: developer input, set according to manifest file
      id: read_sln
      run: |
        SOLUTION_PATH=$(jq -r '.solution_path[]' solutions.json)
        echo "Read solution_path: $SOLUTION_PATH"
        echo "SOLUTION_PATH=$SOLUTION_PATH" >> $GITHUB_ENV

    - name: Build with dotnet
      run: dotnet build $SOLUTION_PATH --configuration Release

    - name: Test with dotnet
      run: dotnet test $SOLUTION_PATH --configuration Release

  sast:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: csharp

    # Autobuild attempts to build any compiled languages (C/C++, C#, Go, Java, or Swift).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    #  If the Autobuild fails above, remove it and uncomment the following lines.
    #  Use either the buildscript.sh step, or the solution file steps.

    # - name: Run, Build Application using script
    #   run: ./location_of_script_within_repo/buildscript.sh

    # - name: Find solution file
    #   run: echo "SOLUTION_FILE=$(find . -maxdepth 1 -name '*.sln' | head -n 1)" >> $GITHUB_ENV

    # - name: Build solution
    #   run: dotnet build $SOLUTION_FILE --configuration Release

    - name: Perform CodeQL Analysis # Automatically uploads results to GitHub Security tab
      uses: github/codeql-action/analyze@v3

  image_scan:
    needs: [build_code, sast]
    name: Docker Build and Scan
    runs-on: ubuntu-latest
    strategy:
      matrix: # TODO: developer input, set according to manifest file
        image:
          - Web
          - PublicApi

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    # TODO: change auth to use GitHub app instead of PAT
    - name: Login to ghcr.io
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.RPOC_PAT }}

    - name: Convert Image Name to Lowercase
      id: lowercase
      run: echo "IMAGE_NAME=$(echo "${{ github.repository }}/${{ matrix.image }}" | awk '{print tolower($0)}')" >> $GITHUB_OUTPUT

    # TODO: add docker/metadata-action to apply tags based on branch, env, etc.
    # TODO: developer input, file parameter should be set based on manifest file
    - name: Build Docker Image for ${{ matrix.image }}
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./src/${{ matrix.image }}/Dockerfile
        push: false
        tags: |
          ghcr.io/${{ steps.lowercase.outputs.IMAGE_NAME }}:${{ github.sha}}
        labels: |
          org.opencontainers.image.source=https://github.com/${{ github.repository }}

    # This step sets the severity threshold and exit code for the Trivy vulnerability scanner based on the branch that triggered the workflow.
    # If the branch is 'main', it sets the severity threshold to 'HIGH' and the exit code to '1'. This means that the Trivy scan will fail if it finds any high or critical vulnerabilities.
    # For any other branch, it sets the severity threshold to 'CRITICAL' and the exit code to '0'. This means that the Trivy scan will not fail, regardless of the severity of any vulnerabilities it finds.
    # The severity threshold and exit code are set as outputs of this step, so they can be used in the 'Run Trivy vulnerability scanner' step.
    - name: Set Severity Threshold
      id: severity
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "SEVERITY=HIGH" >> $GITHUB_OUTPUT
          echo "EXIT_CODE=1" >> $GITHUB_OUTPUT
        else
          echo "SEVERITY=CRITICAL" >> $GITHUB_OUTPUT
          echo "EXIT_CODE=0" >> $GITHUB_OUTPUT
        fi

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      continue-on-error: true
      with:
        scan-type: 'image'
        scanners: 'vuln,secret'
        image-ref: 'ghcr.io/${{ steps.lowercase.outputs.IMAGE_NAME }}:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
        ignore-unfixed: false
        vuln-type: 'os,library'
        severity: ${{ steps.severity.outputs.SEVERITY }}
        exit-code: ${{ steps.severity.outputs.EXIT_CODE }}
        github-pat: ${{ secrets.RPOC_PAT }}
      env:
        TRIVY_USERNAME: ${{ github.actor }}
        TRIVY_PASSWORD: ${{ secrets.RPOC_PAT }}

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'


  dast:
    needs: [image_scan]
    name: OWASP Scan
    runs-on: ubuntu-latest
    strategy:
      matrix: # TODO: developer input, set according to manifest file
        image:
          - Web
          - PublicAPI

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Start the Application
        run: |
          docker-compose build
          docker-compose up -d

      # TODO: developer input, set target URL based on image or manifest
      - name: Set Target URL
        id: set_target
        run: |
          if [[ "${{ matrix.image }}" == "Web" ]]; then
            echo "TARGET=http://localhost:5106" >> $GITHUB_OUTPUT
          else
            echo "TARGET=http://localhost:5200" >> $GITHUB_OUTPUT
          fi

      - name: OWASP Scan ${{ matrix.image }}
        uses: zaproxy/action-baseline@v0.11.0
        with:
          target: ${{ steps.set_target.outputs.TARGET }}
          allow_issue_writing: false # Skip creating issue for now
          docker_name: 'ghcr.io/zaproxy/zaproxy:20231218-stable' # zaproxy:20240103-stable breaks due to https://github.com/zaproxy/action-full-scan/issues/39
          artifact_name: zap-scan-${{ matrix.image }}
          # cmd_options: '-d' # '-d' is for debug mode
          # token: ${{ secrets.GITHUB_TOKEN }}
          # rules_file_name: '.zap/rules.tsv'

      - name: Upload ZAP Report for ${{ matrix.image }}
        uses: actions/upload-artifact@v4
        with:
          name: zap-scan-${{ matrix.image }}
          path: zap_scan
